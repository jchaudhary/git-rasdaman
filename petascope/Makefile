# Makefile.in generated by automake 1.11.3 from Makefile.am.
# applications/petascope/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011 Free Software
# Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



# -*-Makefile-*-
#
# This file is part of rasdaman community.
#
# Rasdaman community is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Rasdaman community is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rasdaman community.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2003, 2004, 2005, 2006, 2007, 2008, 2009 Peter Baumann /
# rasdaman GmbH.
#
# For more information please see <http://www.rasdaman.org>
# or contact Peter Baumann via <baumann@rasdaman.com>.
# 
# MAKEFILE FOR:  
#   petascope
# 
# COMMENTS:
# 
##################################################################

# ------------------------------------------------------------------------------
#                                 VARIABLES
# ------------------------------------------------------------------------------

pkgdatadir = $(datadir)/rasdaman
pkgincludedir = $(includedir)/rasdaman
pkglibdir = $(libdir)/rasdaman
pkglibexecdir = $(libexecdir)/rasdaman
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
subdir = applications/petascope
DIST_COMMON = README $(srcdir)/Makefile.am $(srcdir)/Makefile.in \
	INSTALL
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/ac_prog_ecpg.m4 \
	$(top_srcdir)/m4/ac_prog_java.m4 \
	$(top_srcdir)/m4/ac_prog_java_cc.m4 \
	$(top_srcdir)/m4/ac_prog_java_works.m4 \
	$(top_srcdir)/m4/ac_prog_rpcgen.m4 \
	$(top_srcdir)/m4/ac_prog_sed.m4 \
	$(top_srcdir)/m4/ax_lib_postgresql.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
SOURCES =
DIST_SOURCES =
ACLOCAL = ${SHELL} /home/rasdaman/install/rasdaman/missing --run aclocal-1.11
ALLOCA = 
AMTAR = $${TAR-tar}
AUTOCONF = ${SHELL} /home/rasdaman/install/rasdaman/missing --run autoconf
AUTOHEADER = ${SHELL} /home/rasdaman/install/rasdaman/missing --run autoheader
AUTOMAKE = ${SHELL} /home/rasdaman/install/rasdaman/missing --run automake-1.11
AWK = gawk
BASEDBCXXFLAGS =  -I/usr/include/postgresql  
BASEDBLDFLAGS = -L/usr/lib -lpq -lz -lecpg -lnsl
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS =  
CLIENTCXXFLAGS =  -I /usr/include/  -g3 -gdwarf-2 -O0 -rdynamic  -I/home/rasdaman/install/rasdaman -I/home/rasdaman/install/rasdaman/debug -I/home/rasdaman/install/rasdaman/include 
CLIENTLDFLAGS = 
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS =  -I /usr/include/  -g3 -gdwarf-2 -O0 -rdynamic  -I/home/rasdaman/install/rasdaman -I/home/rasdaman/install/rasdaman/debug -I/home/rasdaman/install/rasdaman/include  -DSHARE_DATA_DIR=\"$(pkgdatadir)/\" -DCONFDIR=\"$(sysconfdir)/\" -DBINDIR=\"$(bindir)/\" -DLOGDIR=\"$(logdir)/\"
CYGPATH_W = echo
DB2_CPPLIBS = 
DB2_INC = 
DB2_INSTANCEPATH = 
DBIF_INC = 
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
ECPG = /usr/bin/ecpg
EGREP = /bin/grep -E
EMBEDDEDSQLEXT = pgc
EMBEDDEDSQLOUT = cc
EMBEDDEDSQLPRECOMPILER = /usr/bin/ecpg -o
EXEEXT = 
GCJ_OPTS = 
GDAL_CONFIG = /usr/bin/gdal-config
GDAL_CXXFLAGS = -I/usr/include/gdal
GDAL_LDFLAGS = -L/usr/lib -lgdal1.7.0
GREP = /bin/grep
INFORMIX_INC = 
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
JAR_TOOL = jar

# Java tools
JAVA = java
JAVA_CC = javac
JAVA_CC_FLAGS = 
JAVA_CC_OPTS = 
LDFLAGS =  -L/usr/lib -lpq
LEX = flex
LEXLIB = -lfl
LEX_OUTPUT_ROOT = lex.yy
LIBOBJS = 
LIBS = -lpgtypes -lpq -lnetcdf_c++ -lnetcdf -lsigsegv -lz -ltiff -lreadline -lnetpbm -lpng -lncurses -ljpeg -lfl -ldl -lcrypto -lcrypt 
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/rasdaman/install/rasdaman/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
OBJEXT = o
PACKAGE = rasdaman
PACKAGE_BUGREPORT = baumann@rasdaman.com
PACKAGE_NAME = Rasdaman
PACKAGE_STRING = Rasdaman 9.0.0
PACKAGE_TARNAME = rasdaman
PACKAGE_URL = 
PACKAGE_VERSION = 9.0.0
PATH_SEPARATOR = :
PG_CONFIG = /usr/bin/pg_config
POSTGRESQL_CFLAGS = -I/usr/include/postgresql
POSTGRESQL_LDFLAGS = -L/usr/lib -lpq
POSTGRESQL_VERSION = 9.1.12
POW_LIB = 
RANLIB = ranlib
RASMGR_PORT = 7001
REL_STATIC_LIBS = 
RMANBASE = /home/rasdaman/install/rasdaman
RPCGEN = /usr/bin/rpcgen
SED = /bin/sed
SET_MAKE = 
SHELL = bash
STATICBASEDBFLAGS = -L/usr/lib -lpq -lz -lecpg
STRIP = 
VERSION = 9.0.0
XMKMF = 
YACC = bison -y
abs_builddir = /home/rasdaman/install/rasdaman/applications/petascope
abs_srcdir = /home/rasdaman/install/rasdaman/applications/petascope
abs_top_builddir = /home/rasdaman/install/rasdaman
abs_top_srcdir = /home/rasdaman/install/rasdaman
ac_ct_CC = gcc
ac_ct_CXX = g++
am__include = include
am__leading_dot = .
am__quote = 
am__tar = tar --format=posix -chf - "$$tardir"
am__untar = tar -xf -
bindir = ${exec_prefix}/bin
build_alias = 
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host_alias = 
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/rasdaman/install/rasdaman/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
logdir = /home/rasdaman/install/log
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /home/rasdaman/install
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../../
top_builddir = ../..
top_srcdir = ../..
wardir = /var/lib/tomcat6/webapps
wpswar = 
VERSION_NUMBER = 1.0
#GEN_DOCS = javadoc
#DOC = doc
#DOCPETASCOPE = $(DOC)/doc-petascope
#APIFOLDER = $(DOCPETASCOPE)/classes

# Location of trees.
SRC = src/main
SRC_MAIN = $(SRC)/java
SRC_RES = $(SRC)/resources
WMS_MES = $(SRC_RES)/wms-messages
SRC_WEB = $(SRC)/webapp
TEST = src/test
BUILD = build
DIST = $(BUILD)/dist
WEB = $(BUILD)/web
CLASSES = $(WEB)/WEB-INF/classes
NAME = rasdaman
WAR_NAME = $(NAME).war
WAR = $(DIST)/$(WAR_NAME)
APIDOCS = $(BUILD)/apidocs
SETTINGS_FILE = $(SRC_RES)/petascope.properties

# Unix tools
FIND = find
MKDIR = mkdir -p
CP = cp -r
CD = cd
RM = rm -rf
JAVAC = javac
JJARS_CP = lib/activation.jar:lib/antlrworks-1.3.1.jar:lib/commons-fileupload-1.2.jar:lib/commons-io-1.3.2.jar:lib/commons-math-1.1.jar:lib/gml-v_3_1_1-schema-1.0-SNAPSHOT.jar:lib/jaxb-api.jar:lib/jaxb-impl.jar:lib/jaxb-xjc.jar:lib/joda-time-2.3.jar:lib/log4j-1.2.15.jar:lib/ows-v_1_0_0-schema-1.0-SNAPSHOT.jar:lib/postgresql-8.3-604.jdbc4.jar:../../java/dist/rasj.jar:lib/servlet-2_5-api.jar:lib/slf4j-api-1.5.8.jar:lib/slf4j-log4j12-1.5.8.jar:lib/wcst-schema.jar:lib/wcs-v_1_1_0-schema-1.0-SNAPSHOT.jar:lib/xom-1.2.6.jar:lib/uuid-3.2.jar:lib/cos.jar:lib/junit-4.5.jar:lib/xercesImpl-2.7.1.jar
JJARS_PATHS = lib/activation.jar lib/antlrworks-1.3.1.jar lib/commons-fileupload-1.2.jar lib/commons-io-1.3.2.jar lib/commons-math-1.1.jar lib/gml-v_3_1_1-schema-1.0-SNAPSHOT.jar lib/jaxb-api.jar lib/jaxb-impl.jar lib/jaxb-xjc.jar lib/joda-time-2.3.jar lib/log4j-1.2.15.jar lib/ows-v_1_0_0-schema-1.0-SNAPSHOT.jar lib/postgresql-8.3-604.jdbc4.jar ../../java/dist/rasj.jar lib/servlet-2_5-api.jar lib/slf4j-api-1.5.8.jar lib/slf4j-log4j12-1.5.8.jar lib/wcst-schema.jar lib/wcs-v_1_1_0-schema-1.0-SNAPSHOT.jar lib/xom-1.2.6.jar lib/uuid-3.2.jar lib/cos.jar lib/junit-4.5.jar lib/xercesImpl-2.7.1.jar
JFLAGS = -sourcepath $(SRC_MAIN) \
               -d $(CLASSES)        \
               -cp $(JJARS_CP)	    \
               -source 1.5

JVMFLAGS = -ea                     \
            -esa                    \
            -Xfuture

JVM = $(JAVA) $(JVMFLAGS)
JAR = jar
JARFLAGS = cf
JAVADOC = javadoc
JDFLAGS = -sourcepath $(SRC_MAIN)  \
            -d $(APIDOCS)	     \
            -source 1.5 -classpath $(JJARS_CP)


# all_javas - Temp file for holding source file list
all_javas = $(CLASSES)/all.javas
EXTRA_DIST = \
	build.xml \
	INSTALL \
	lib \
	LICENCE \
	Makefile.am \
	Makefile.in \
	Makefile \
	nbproject \
	README \
	README.WCS2 \
	src \
	templates \
	xml

DISTFILES = $(EXTRA_DIST)
all: all-am

.SUFFIXES:
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu applications/petascope/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu applications/petascope/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
tags: TAGS
TAGS:

ctags: CTAGS
CTAGS:

check-am: all-am
check: check-am
all-am: Makefile
installdirs:
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean-am: clean-generic mostlyclean-am

distclean: distclean-am
	-rm -f Makefile
distclean-am: clean-am distclean-generic

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: install-am install-strip

.PHONY: all all-am check check-am clean clean-generic distclean \
	distclean-generic distdir dvi dvi-am html html-am info info-am \
	install install-am install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-generic pdf pdf-am ps ps-am uninstall uninstall-am


# ------------------------------------------------------------------------------
#                                 TARGETS
# ------------------------------------------------------------------------------

# Create war
.PHONY: war
war: compileit
	$(MKDIR) $(DIST)
	$(CD) $(WEB); $(JAR) $(JARFLAGS) ../../$(WAR) .

# Print the targets
.PHONY: help
help:
	@echo
	@echo "  Available rules:"
	@echo "    war      create WAR archive in $(DIST)"
	@echo "    install  copy generated WAR archive to wardir set at configure"
	@echo "    javadoc  to generate Javadoc in $(APIDOCS)"
	@echo "    setupdb  setup petascope database"
	@echo "    dropdb   destroy petascope database"
	@echo "    test     run automated tests"
	@echo "    clean    remove all build files"
	@echo "    wps      build 52n WPS server with petascope support and copy to wardir"
	@echo

# Gather source file list, excluding n52 which are exclusively compiled with maven
.INTERMEDIATE: $(all_javas)
$(all_javas):
	$(MKDIR) $(CLASSES)
	$(FIND) $(SRC_MAIN) $(TEST) -name '*.java' | grep -v 'n52' > $@

# compileit - Compile the source
.PHONY: compileit
compileit: $(all_javas) $(GEN_DOCS)
	$(MAKE) -C ../../java $(MAKECMDGOALS)
	$(MKDIR) $(BUILD)
	$(SED) 's|@confdir@|$(DESTDIR)$(sysconfdir)/|g' $(SRC_WEB)/WEB-INF/web.xml.in > $(SRC_WEB)/WEB-INF/web.xml
	$(CP) $(SRC_WEB)/* $(WEB)
	$(CP) templates xml $(WEB)
	$(MKDIR) $(WEB)/WEB-INF/lib
	test -f ../../java/dist/rasj.jar || make -C ../../java
	$(CP) $(JJARS_PATHS) $(WEB)/WEB-INF/lib
	$(CP) $(SRC_MAIN)/* $(CLASSES) # copy resources (xml, xsd, properties)
	$(MKDIR) $(WEB)/WEB-INF/wms-messages
	$(CP) $(WMS_MES)/* $(WEB)/WEB-INF/wms-messages/ # copy WMS error messages
	$(FIND) $(BUILD) -name '*.java' | xargs $(RM)
	$(FIND) $(BUILD) -name '.svn' | xargs $(RM) # remove .svn directories
	$(JAVAC) $(JFLAGS) @$<

# Generate the Java doc from sources
.PHONY: javadoc
javadoc: $(all_javas)
	$(JAVADOC) $(JDFLAGS) @$<

# copy WAR to TOMCAT
.PHONY: install
install: war
	$(MKDIR) $(DESTDIR)$(wardir)
	$(CP) $(WAR) $(DESTDIR)$(wardir)
#	$(MKDIR) -p $(DESTDIR)$(pkgdatadir)/$(APIFOLDER)
#	$(CP) $(APIDOCS)/* $(DESTDIR)$(pkgdatadir)/$(APIFOLDER)
	NEWCONF=$(DESTDIR)$(sysconfdir)/petascope.properties; \
	if test -f $(NEWCONF); then \
		echo "$@ existing $$NEWCONF"; \
		grep 'secore_urls' $$NEWCONF > /dev/null 2>&1; \
		if test $$? -ne 0; then \
			echo "$@ found a pre 9.0 petascope.properties, migrating to 9.0 format..."; \
			OLDCONF=$(DESTDIR)$(sysconfdir)/petascope.properties.bak.pre9.0; \
			echo "$@ moving old configuration to $$OLDCONF"; \
			mv $(DESTDIR)$(sysconfdir)/petascope.properties $$OLDCONF; \
			echo " $(INSTALL_DATA) $(SETTINGS_FILE) $$NEWCONF"; \
			$(INSTALL_DATA) $(SETTINGS_FILE) $$NEWCONF; \
			for p in metadata_driver metadata_url metadata_user metadata_pass rasdaman_url rasdaman_user rasdaman_pass rasdaman_admin_user rasdaman_admin_pass rasdaman_retry_attempts rasdaman_retry_timeout; do \
			  pg=`grep "$$p=" $$OLDCONF`; \
			  echo "$@ updating parameter $$p to original value: $$pg"; \
			  if test -n "$$pg"; then \
			    sed -i 's|'$$p'=.*|'$$pg'|g' $$NEWCONF; \
			  fi; \
			done; \
			echo "$@ 9.0 petascope configuration installed at $$NEWCONF, please edit and adapt."; \
		else \
			echo "$@ will not overwrite existing $$NEWCONF"; \
		fi; \
	else \
		$(MKDIR_P) $(DESTDIR)$(sysconfdir); \
		echo " $(INSTALL_DATA) $(SETTINGS_FILE) $$NEWCONF"; \
		$(INSTALL_DATA) $(SETTINGS_FILE) $$NEWCONF; \
	fi; \
	if test -f $(DESTDIR)$(sysconfdir)/log4j.properties; then \
		echo "$@ will not overwrite existing $(DESTDIR)$(sysconfdir)/log4j.properties"; \
	else \
		$(MKDIR_P) $(DESTDIR)$(sysconfdir); \
		echo " $(INSTALL_DATA) src/main/resources/log4j.properties $(DESTDIR)$(sysconfdir)/log4j.properties"; \
		$(INSTALL_DATA) src/main/resources/log4j.properties $(DESTDIR)$(sysconfdir)/log4j.properties; \
	fi;

# run any JUnit tests
.PHONY: test
test:
	${JAVA} -cp $(JJARS_CP):$(BUILD)/test/classes:$(BUILD)/web/WEB-INF/classes org.junit.runner.JUnitCore petascope.AllTests

# clean up
.PHONY: clean
clean:
	$(RM) $(BUILD) dist

# build jar file
.PHONY: jar
jar: compileit
	$(CD) $(CLASSES); $(JAR) $(JARFLAGS) ../../../$(NAME).jar .

# inject petascope libs into the 52n wps 
.PHONY: wps
wps: jar
	$(MKDIR) $(BUILD)/wps
	$(CP) $(wpswar) $(BUILD)/wps/wps.war
	cd $(BUILD)/wps; $(JAR) xf wps.war; $(RM) wps.war
	$(CP) $(BUILD)/petascope.jar lib/*.jar $(BUILD)/wps/WEB-INF/lib
	$(CD) $(BUILD)/wps; $(JAR) $(JARFLAGS) ../wps.war .
	$(CP) $(BUILD)/wps.war $(DESTDIR)$(wardir)
	$(SED) -e 's|@confDir@|$(sysconfdir)|g' $(SRC_RES)/n52/ProcessCoverages.java.in > $(SRC_RES)/n52/ProcessCoverages.java

.PHONY: all
all: war

# Put petascope into archive for RPM generation
.PHONY: distdir
distdir:
	$(MKDIR) $(distdir)
	cp -R $(DISTFILES) $(distdir)

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
